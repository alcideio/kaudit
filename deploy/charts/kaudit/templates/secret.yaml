{{- if ne .Values.image.source "Marketplace" }}
---
apiVersion: v1
kind: Secret
metadata:
  name: registry.alcide.io-{{ .Values.clusterName }}
  namespace: {{ .Values.namespace }}
  annotations:
    com.alcide.io/component.role: alcide-registry
    com.alcide.io/info.vendor: "Alcide IO Inc."
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: {{ .Values.image.pullSecretToken | quote }}
{{- end }}

---
apiVersion: v1
kind: Secret
metadata:
  name: kaudit-{{ .Values.clusterName }}
  namespace: {{ .Values.namespace }}
  labels:
    app: kaudit
    app-name: kaudit-{{ .Values.clusterName }}
type: Opaque
data:
  token:  {{ default "" .Values.alcide.token | b64enc | quote }} 
  prometheusToken: {{ default "" .Values.prometheus.token | b64enc | quote }} 
  # GKE-token (for GKE)
  gkeToken: {{ default "" .Values.gke.token | quote }}
  # Azure EventHub connection string (for AKS)
  aksConnectionString: {{ default "" .Values.aks.eventHubconnectionString  | quote }}
  # AWS Kinesis stream credentials (for EKS and S3)
  awsSecretAccessKey: {{ default "" .Values.aws.secretAccessKey | quote }}


{{- $kauditName        :=  printf "kaudit-%s" .Values.clusterName -}}
{{- $kauditFQDN        :=  printf "%s.%s"  $kauditName  .Values.namespace  -}}
{{- $kauditServiceName :=  printf "%s.svc"  $kauditFQDN  -}}
{{- $kauditServiceFQDN :=  printf "%s.cluster.local"  $kauditServiceName  -}}
{{- $kauditIngressFQDN :=  ""  -}}
{{- if .Values.ingress.enable -}}
{{- $kauditIngressFQDN =  printf "%s.%s"  $kauditName .Values.ingress.subDomain -}}
{{- end -}}

{{- $altNames := concat (list "localhost"  $kauditName  $kauditServiceName $kauditServiceFQDN $kauditIngressFQDN) .Values.tls.selfSigned.alternativeNames -}}
{{- $ca := genCA "alcide-kaudit-ca" 365 -}}
{{- $cert := genSignedCert $kauditName (list "127.0.0.1") $altNames 3650 $ca -}}

{{- $caPem   :=  $ca.Cert   | b64enc -}}
{{- $certPem :=  $cert.Cert | b64enc -}}
{{- $keyPem  :=  $cert.Key  | b64enc -}}

{{- if or .Release.IsInstall (eq .Values.tls.mode "external") }}
---
# Generate the self-signed secrets once on install 
apiVersion: v1
kind: Secret
metadata:
  name: kaudit-{{ .Values.clusterName }}-certs
  namespace: {{ .Values.namespace }}
  labels:
    app: kaudit-{{ .Values.clusterName }}
    app-name: kaudit-{{ .Values.clusterName }}
type: Opaque 
data:
{{- if eq .Values.tls.mode "self-signed" }}
  ca.pem: {{ $caPem }}
  cert.pem: {{ $certPem }}
  key.pem: {{ $keyPem }}
  tls.crt: {{ $certPem }}
  tls.key: {{ $keyPem }}
{{- else }}
{{ (.Files.Glob "certs/*").AsSecrets | indent 2 }}  
  tls.crt: {{ .Files.Get "certs/cert.pem" | b64enc  }}
  tls.key: {{ .Files.Get "certs/key.pem" | b64enc   }}
{{- end }}

{{- end }}



{{ if eq .Values.k8sAuditEnvironment "k8s" }}
{{ if eq .Values.k8s.mode "auditsink" }}

---
# Audit Sink for k8s ; CA Bundle is base-64 encoding of server cert
apiVersion: auditregistration.k8s.io/v1alpha1
kind: AuditSink
metadata:
  name: alcide-kaudit-sink-{{ .Values.clusterName }}
  labels:
    app: kaudit
    app-name: kaudit-{{ .Values.clusterName }}
  #annotations:
  # If CA changed force k8s to update the webhook configuration
  # {{ if eq .Values.tls.mode "self-signed" }}        
  #     checksum/kaudit-ca: {{ $caPem | b64enc | sha256sum | quote}} 
  # {{ else }}
  #     checksum/kaudit-ca: {{ .Files.Get "certs/ca.pem" | b64enc | sha256sum | quote}} 
  # {{ end }}   
     
spec:
  policy:
    level: Metadata
    stages:
      - ResponseComplete
  webhook:
    throttle:
      qps: 40
      burst: 60
    clientConfig:
      service:
        name: kaudit-{{ .Values.clusterName }}
        namespace: {{ .Values.namespace }}
        path: "/auditsink"
        port: 443
  {{ if eq .Values.tls.mode "self-signed" }}        
      caBundle: {{ $caPem }}
  {{ else }}
      caBundle: {{ .Files.Get "certs/ca.pem"  | b64enc }}
  {{ end }}      

{{ end }}
{{ end }}


{{- if eq .Values.runOptions.experimental.enableEnforcement true -}}

---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: kaudit-{{ .Values.clusterName }}
  namespace: {{ .Values.namespace }}
  labels:
    app: kaudit
    app-name: kaudit-{{ .Values.clusterName }}
webhooks:
- name: {{ $kauditServiceName }}
  # pass everything to kAudit admission control, except kAudit install/deploy objects
  namespaceSelector:
    # pass everything to kAudit admission control, except those in namespaces labeled with 'skip-kaudit-admission'  
    # in particular - kAudit's own namespace ({{ .Values.namespace }}) should be labeled this way to skip admission  
    matchExpressions:
      - key: "skip-kaudit-admission"
        operator: "DoesNotExist"
  rules:
    - apiGroups:   ["*"]
      apiVersions: ["*"]
      operations:  ["*"]
      resources:   ["*/*"]
      scope:       "*"
  clientConfig:
    # kAudit admission control webhook, either a url or a service.
    # when using kAudit which is not deployed on the monitored cluster:
    # url: "https://external-kaudit-url:443/admission"
    # when using kAudit service which is deployed on the same cluster:    
    service:
      name: kaudit-{{ .Values.clusterName }}
      namespace: {{ .Values.namespace }}
      path: "/admission"
      port: 443
{{ if eq .Values.tls.mode "self-signed" }}        
    caBundle: {{ $caPem }}
{{ else }}
    caBundle: {{ .Files.Get "certs/ca.pem"  | b64enc }}
{{ end }}
  admissionReviewVersions: ["v1", "v1beta1"]
  sideEffects: None
  timeoutSeconds: 5
  # admission failure handling: Fail to reject API request on error/failure, Ignore to allow it
  failurePolicy: Ignore
{{- end }}

{{ if eq .Values.license.enabled true}}
---
apiVersion: v1
kind: Secret
metadata:
  name: kaudit-entitlement
  namespace: {{ .Values.namespace }}
  labels:
    app: kaudit
type: Opaque
data:
  # Alcide customer ID
  customer-id: {{ .Values.license.customerId | b64enc | quote }}
  # Alcide entitlement
  entitlement: {{ .Values.license.entitlement | b64enc | quote }}
{{- end }}