---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kaudit-{{ .Values.clusterName }}
  namespace: {{ .Values.namespace }}
  labels:
    app: kaudit
    app-name: kaudit-{{ .Values.clusterName }}
  annotations:
    com.alcide.io/component.role: cloud-audit-k8s
    com.alcide.io/component.tier: database
    com.alcide.io/info.vendor: Alcide IO Inc.
spec:
  selector:
    matchLabels:
      app-name: kaudit-{{ .Values.clusterName }}
  serviceName: kaudit-{{ .Values.clusterName }}
  replicas: 1
  template:
    metadata:
      labels:
        app: kaudit
        app-name: kaudit-{{ .Values.clusterName }}
      annotations:
        policy.alcide.io/inbound0: service://kaudit-{{ .Values.clusterName }}
        policy.alcide.io/inbound1: tcp://any:8443
        policy.alcide.io/outbound0: service://kube-dns
        policy.alcide.io/outbound1: service://coredns
        policy.alcide.io/outbound2: service://kaudit-{{ .Values.clusterName }}
{{ if eq .Values.vault.mode "agent-inject" }}
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/role: "kaudit-{{ .Values.clusterName }}"
        vault.hashicorp.com/agent-pre-populate-only: "true"
        vault.hashicorp.com/agent-inject-secret-kaudit.conf: "secret/alcide/kaudit-{{ .Values.clusterName }}"
        vault.hashicorp.com/agent-inject-template-kaudit.conf: |
          {{"{{- with secret \"secret/alcide/kaudit-"}}{{- .Values.clusterName -}}{{"\" -}}"}}
          {{"{{ range $k, $v := .Data.data }}"}}
          {{"\"{{ $k }}\": \"{{ $v }}\""}}
          {{"{{ end }}"}}
          {{"{{- end -}}"}}
{{ end }}
     
    spec:
      hostname: kaudit-{{ .Values.clusterName }}
      terminationGracePeriodSeconds: 120
      volumes:
      - name: policy-volume
        configMap:
          name: kaudit-policy-{{ .Values.clusterName }}
          items:
            - key: audit-policy
              path: audit-policy.yaml
      - name: integration-volume
        configMap:
          name: kaudit-integrations-{{ .Values.clusterName }}
          items:
            - key: audit-integration
              path: audit-integration.yaml                    
      - name: keystore-volume
        emptyDir: {}      
      - name: key-volume
        emptyDir: {}
      - name: convertkey-volume
        configMap:
          name: kaudit-{{ .Values.clusterName }}-keyconvert
          items:
          - key: convert.sh
            path: convert.sh     
          defaultMode: 0770            
      - name: cert-volume
        secret:
          secretName: kaudit-{{ .Values.clusterName }}-certs
      - name: config-volume
        configMap:
            name: kaudit-{{ .Values.clusterName }}
            items:
              - key: audit-source
                path: audit-source.properties
      - name: data-volume
        persistentVolumeClaim:
          claimName: data-volume-claim-kaudit-{{ .Values.clusterName }}
{{- if eq .Values.vault.mode "vault" }}          
      - name: vault-token
        emptyDir:
            medium: Memory
        
      - name: vault-agent-config
        configMap:
          defaultMode: 420
          items:
            - key: vault-agent-config.hcl
              path: vault-agent-config.hcl
          name: vault-agent-config-kaudit-{{ .Values.clusterName }}
{{- end }}          
 
      imagePullSecrets:
        - name: registry.alcide.io-{{ .Values.clusterName }}
      # Pod Security
      serviceAccountName: alcide-k8s-kaudit-{{ .Values.clusterName }}      
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
    

      initContainers:
{{- if eq .Values.vault.mode "vault" }}
      # Vault Integration      
      - name: vault-agent-auth
        args: ["agent", "-config=/etc/vault/vault-agent-config.hcl"]
        env:
          - name: SKIP_SETCAP
            value: 'true'        
          - name: VAULT_ADDR
            value: {{.Values.vault.vaultServer }} 
          - name: VAULT_AGENT_ADDR
            value: http://localhost:8100
        image: {{.Values.vault.image }}
        imagePullPolicy: IfNotPresent  
        securityContext:   
            allowPrivilegeEscalation: false  
            capabilities:
              drop:
                - ALL                             
        volumeMounts:            
          - mountPath: /etc/vault
            name: vault-agent-config
          - mountPath: /vault
            name: vault-token   
{{- end }}
      - name: convert-pem-to-keystore
        image: {{ .Values.image.kaudit }}
        imagePullPolicy: IfNotPresent
        command: ["/convert.sh"]
        volumeMounts:
        - name: convertkey-volume
          mountPath: /convert.sh
          subPath: convert.sh        
        - name: cert-volume
          mountPath: /input
        - name: keystore-volume
          mountPath: /output       
        # Container Security            
        securityContext:
            allowPrivilegeEscalation: false     
            capabilities:
                drop:
                - ALL          
      containers:
      - name: kaudit
        image: {{ .Values.image.kaudit }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}   
        securityContext:     
            allowPrivilegeEscalation: false
            capabilities:
                drop:
                - ALL
        volumeMounts:
{{- if eq .Values.vault.mode "vault" }}        
        - mountPath: /vault
          name: vault-token     
{{- end }}             
        - name: key-volume
          mountPath: /key
        - name: keystore-volume
          mountPath: /keystore
        - name: config-volume
          mountPath: /config
        - name: policy-volume
          mountPath: /kaudit/policy
        - name: integration-volume
          mountPath: /kaudit/integration          
        - name: data-volume
          mountPath: /data
        ports:
          - containerPort: 8443
            protocol: TCP
            name: sec-api
        # Health    
        livenessProbe:
          tcpSocket:
            port: 8443
          initialDelaySeconds: 120
          periodSeconds: 10
          timeoutSeconds: 30
        readinessProbe:
          tcpSocket:
            port: 8443
          initialDelaySeconds: 120
          periodSeconds: 10
          timeoutSeconds: 30
        # Resources  
        resources:
          requests:
            memory: {{ .Values.resources.memoryRequest }}
            cpu: {{ .Values.resources.cpuRequest }}
          limits:
            memory: {{ .Values.resources.memoryLimit }}
            cpu: {{ .Values.resources.cpuLimit }}

        env:
        - name: ALCIDE_TOKEN
          valueFrom:
            secretKeyRef:
              name: kaudit-{{ .Values.clusterName }}
              key: token

        - name: JAVA_OPTS
          value: -Xmx{{- .Values.resources.javaXmX }} -Djava.security.egd=file:/dev/urandom -Dclojure.spec.skip-macros=true -Dclojure.compiler.direct-linking=true {{ include "commonJavaFlags" . | indent 12 }}
        - name: CERT
          value: "/keystore/cert.pem"
        - name: PRIV_KEY
          value: "/keystore/key.p12"

{{- if eq .Values.runOptions.eulaSign true }}       
        - name: EULA
          value: "true"
{{- end }}

{{- if eq .Values.runOptions.activateAnalysis true }}        
        - name: MINUTES
          value: "1"
{{- end }}

{{- if eq .Values.runOptions.enableStateApi true }}        
        - name: REST
          value: "true"
{{- end }}

{{ if ne .Values.vault.mode "none" }}        
        - name: EXTERNAL_CONFIG_FILE
          value: /vault/secrets/kaudit.conf
{{ end }}          

        - name: TOKEN                # GKE-token (for GKE)
          valueFrom:
            secretKeyRef:
              name: kaudit-{{ .Values.clusterName }}
              key: gkeToken

        - name: CONNECTION_STRING    # Azure EventHubName connection (for AKS)
          valueFrom:
            secretKeyRef:
              name: kaudit-{{ .Values.clusterName }}
              key: aksConnectionString

        - name: SECRET_ACCESS_KEY    # AWS Kinesis stream credentials (for EKS)
          valueFrom:
            secretKeyRef:
              name: kaudit-{{ .Values.clusterName }}
              key: awsSecretAccessKey

        - name: STORE_LOCATION
          value: /data
