namespace: alcide-kaudit
clusterName: kaudit-gadi
image:
  kaudit: "gcr.io/dcvisor-162009/alcide/dcvisor/kaudit:latest"
  pullPolicy: Always #Always for :latest or no tag, IfNotPresent for other tags
  pullSecretToken: "eyJhdXRocyI6eyJodHRwczovL2djci5pbyI6eyJ1c2VybmFtZSI6Il9qc29uX2tleSIsInBhc3N3b3JkIjoie1xuICBcInR5cGVcIjogXCJzZXJ2aWNlX2FjY291bnRcIixcbiAgXCJwcm9qZWN0X2lkXCI6IFwiYWxjaWRlLXJuZFwiLFxuICBcInByaXZhdGVfa2V5X2lkXCI6IFwiMTA1NDBlMjliMWY3OWE1YzE1YjIwOTI3MTk4NjI4MTVlZGQ5NWMxZlwiLFxuICBcInByaXZhdGVfa2V5XCI6IFwiLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tXFxuTUlJRXZ3SUJBREFOQmdrcWhraUc5dzBCQVFFRkFBU0NCS2t3Z2dTbEFnRUFBb0lCQVFEV2Z2N09JZ2cvWUY3VFxcbk1FYVc4L1YzMnFnWERPbEM2U3Q4OTJ1N0lIekZkZlM4c3QvTTdwZDRIcXB3ZUM1OEVxRnYrVndVZnFGQlUrNVdcXG5pdUlQbFljZTlsNS9MQzdBMmN0MkhYU0V2Y01lRm05L2psc0ZobEU5TjlZWUYySStMTVl3VlZDK3M5c0M4TThCXFxucGNVSUZYTWVWLzR2Y3RGOE1YT1g1b0hBeXBWZG1CMTl5ZHVHQm1JRlFRWWNVY0lweHFFcU4vWVVlTVpVVUhyU1xcblp5WnozWkpYcjg0TzByOFFuN2kxd1RuY3ZqK0U5N0QzVytxeUNxYlVaODhtelk0dWUyVFUxNGs0T3FBT3JRMmFcXG5xTmkyK2xsdzhyYWp4TWl5UUs0Kzd6c3NPL3dBWjBjd01MT0kzOFpyM0lwb0tFL0ZaL1o0MlAySVluLzFVL3JkXFxuaEx5ZnZhekJBZ01CQUFFQ2dnRUFIQjA5TEt1TlJURk9mSVBoWEx2Uk9zcHdLY1ZKZGJtMk40VCttK0pnT0VtRFxcbnNKQUpnWVRzV1pRN1pzNTUyVTFmMTV0cGxFNGN1TUZWaGdaaUp3VEVWeXlYcWplU1VUaTYwRnFBQVQ0V0t3VnBcXG55K0JPMGVTUEZXVVNMTW96MkU1cUU3KzYrNlA3V3VGUllMZm5vVzJlVHlYZGJUNnhjb1BRME9JbnM2dFo5SkJVXFxuSU53NnB0TWVxdkhSSkJiWmdsOGtGRVJERTZHanEwRFNVbDNwK2dBdFBjemZUZUtBQUtFM1hqR2habng0VjFhV1xcbjdTVDViUDRXZGo2cmxTZHlPdldaV2RmWk1lVDFmN0FlN2N0RFJOQlJDd1dMVUZ4U1A4cmZTNzVsTXFxSW5RclNcXG54cGFwajdLOXBuTzdoS0hvbUVVZnpMMmExQmlJQ01vYzBQZENPYVBib1FLQmdRRDBwRFAvcys4ZXJEamRvekw3XFxuVEdXeml2SURsbjFROWt4U3E5UWYydjNIU3FLTlU5MU85ZDI2bVF0Z1B3Y2ZpbmlCM0tzU1cwQllZLzkzcURiUVxcbk5lMEEvVlBndURadVNUZVBhRzVRTnRJU3h3RDJNS0svNXIzVVpVZTFWQUdUTTYxeFhzd0ZYY2NQdWZON2tvVU9cXG5oQm1yVlBHSUMzMUlyMFFzczMrc0x5dFFGUUtCZ1FEZ2RIeHNGMHhUY0dIY0gzbk42OWZUUEROdURnWTFSQ0ltXFxuZ1lYMlUraFcwdENwZmU0TTQ3VHdldmwwREF2cXdmYmNnRE1mY3FQUmY3RXU2TVhaQk9ZOHdoU2s3blZYWEw3b1xcbkxNeUlKQVdIOHoxd1ozWWVJVCtHZ1ZTR2xuNGtKZmhkamVEa0dYSFhZZEljZVJibytkbEoxVDZOc2pOYVpwbnJcXG5oRkZodG90by9RS0JnUURyUnBBTHRzeWRQeHhoYTNhNFg3emZjeDFWZmdGL1A2QWZVY2xyNlh4dmtjUExENENqXFxuVTZtdXIwbFZnc2dpK1ZUejczbEc2aU56M3BmdVNBU1BNWTJCaWlDRTJpVGU0K05mTkJ3RFlQV2Z3V3VYV1Nic1xcblQ4ajQzMzZiVVBOQzBreFgzOGR1MGNXRHhsMzMxZTNKREJwenYvbVowUkxvT0Via2hxeWV0NjU4RVFLQmdRQ1hcXG5qcEFrL0daUlFPVVRHVDNKeWFIbHhCU0dEM29wcFdQWjFFTjhYSlBaYkdmd3lsTmU2TEpZWHZEcFp1ajFEeHQ5XFxuTUNOVTdMZW8waXYxbkw5YkZtL1FQc3hwd1lvQi8ySDRxNmMvbGZNV0pTd3JKZkVmenh0eDJ3b1VCcklOL29XQlxcbnhqZEFUZDRNck1TTzdVU0c4NDNBeVBoLy9QK24zdmUzaTVUWUFjYUlrUUtCZ1FEdVBnVGJRTWVVb3FSRXVwV1RcXG42Snp4RFNmTThVTC9ncDBnb1hlUFJVTFpkZ3JHV1p4cHpFSS93Q2l2UWRtcitCQUthVnVsZHlGcGtHdTVHV0k2XFxuWTRNR2dNUm5RM21NcTkvQzcxSGhqem9qYTg2bDN0NUxnTC8zVHZFZ0lmRjI2QlVIMXNqaVVXS2VLdUJ4eTl4eVxcblJ2ejNvT3V4eHBhT3hpMVVjMlZHRVdKK1NnPT1cXG4tLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tXFxuXCIsXG4gIFwiY2xpZW50X2VtYWlsXCI6IFwiYWxjaWRlLWNsdXN0ZXItY3JlYXRvckBhbGNpZGUtcm5kLmlhbS5nc2VydmljZWFjY291bnQuY29tXCIsXG4gIFwiY2xpZW50X2lkXCI6IFwiMTE0NTM2MzMzODE0OTgwNDE0NjM0XCIsXG4gIFwiYXV0aF91cmlcIjogXCJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vby9vYXV0aDIvYXV0aFwiLFxuICBcInRva2VuX3VyaVwiOiBcImh0dHBzOi8vb2F1dGgyLmdvb2dsZWFwaXMuY29tL3Rva2VuXCIsXG4gIFwiYXV0aF9wcm92aWRlcl94NTA5X2NlcnRfdXJsXCI6IFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YxL2NlcnRzXCIsXG4gIFwiY2xpZW50X3g1MDlfY2VydF91cmxcIjogXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9yb2JvdC92MS9tZXRhZGF0YS94NTA5L2FsY2lkZS1jbHVzdGVyLWNyZWF0b3IlNDBhbGNpZGUtcm5kLmlhbS5nc2VydmljZWFjY291bnQuY29tXCJcbn0iLCJlbWFpbCI6ImFsY2lkZS1jbHVzdGVyLWNyZWF0b3JAYWxjaWRlLXJuZC5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIsImF1dGgiOiJYMnB6YjI1ZmEyVjVPbnNLSUNBaWRIbHdaU0k2SUNKelpYSjJhV05sWDJGalkyOTFiblFpTEFvZ0lDSndjbTlxWldOMFgybGtJam9nSW1Gc1kybGtaUzF5Ym1RaUxBb2dJQ0p3Y21sMllYUmxYMnRsZVY5cFpDSTZJQ0l4TURVME1HVXlPV0l4WmpjNVlUVmpNVFZpTWpBNU1qY3hPVGcyTWpneE5XVmtaRGsxWXpGbUlpd0tJQ0FpY0hKcGRtRjBaVjlyWlhraU9pQWlMUzB0TFMxQ1JVZEpUaUJRVWtsV1FWUkZJRXRGV1MwdExTMHRYRzVOU1VsRmRuZEpRa0ZFUVU1Q1oydHhhR3RwUnpsM01FSkJVVVZHUVVGVFEwSkxhM2RuWjFOc1FXZEZRVUZ2U1VKQlVVUlhablkzVDBsblp5OVpSamRVWEc1TlJXRlhPQzlXTXpKeFoxaEVUMnhETmxOME9Ea3lkVGRKU0hwR1pHWlRPSE4wTDAwM2NHUTBTSEZ3ZDJWRE5UaEZjVVoySzFaM1ZXWnhSa0pWS3pWWFhHNXBkVWxRYkZsalpUbHNOUzlNUXpkQk1tTjBNa2hZVTBWMlkwMWxSbTA1TDJwc2MwWm9iRVU1VGpsWldVWXlTU3RNVFZsM1ZsWkRLM001YzBNNFRUaENYRzV3WTFWSlJsaE5aVll2TkhaamRFWTRUVmhQV0RWdlNFRjVjRlprYlVJeE9YbGtkVWRDYlVsR1VWRlpZMVZqU1hCNGNVVnhUaTlaVldWTldsVlZTSEpUWEc1YWVWcDZNMXBLV0hJNE5FOHdjamhSYmpkcE1YZFVibU4yYWl0Rk9UZEVNMWNyY1hsRGNXSlZXamc0YlhwWk5IVmxNbFJWTVRSck5FOXhRVTl5VVRKaFhHNXhUbWt5SzJ4c2R6aHlZV3A0VFdsNVVVczBLemQ2YzNOUEwzZEJXakJqZDAxTVQwa3pPRnB5TTBsd2IwdEZMMFphTDFvME1sQXlTVmx1THpGVkwzSmtYRzVvVEhsbWRtRjZRa0ZuVFVKQlFVVkRaMmRGUVVoQ01EbE1TM1ZPVWxSR1QyWkpVR2hZVEhaU1QzTndkMHRqVmtwa1ltMHlUalJVSzIwclNtZFBSVzFFWEc1elNrRktaMWxVYzFkYVVUZGFjelUxTWxVeFpqRTFkSEJzUlRSamRVMUdWbWhuV21sS2QxUkZWbmw1V0hGcVpWTlZWR2syTUVaeFFVRlVORmRMZDFad1hHNTVLMEpQTUdWVFVFWlhWVk5NVFc5Nk1rVTFjVVUzS3pZck5sQTNWM1ZHVWxsTVptNXZWekpsVkhsWVpHSlVObmhqYjFCUk1FOUpibk0yZEZvNVNrSlZYRzVKVG5jMmNIUk5aWEYyU0ZKS1FtSmFaMnc0YTBaRlVrUkZOa2RxY1RCRVUxVnNNM0FyWjBGMFVHTjZabFJsUzBGQlMwVXpXR3BIYUZwdWVEUldNV0ZYWEc0M1UxUTFZbEEwVjJScU5uSnNVMlI1VDNaWFdsZGtabHBOWlZReFpqZEJaVGRqZEVSU1RrSlNRM2RYVEZWR2VGTlFPSEptVXpjMWJFMXhjVWx1VVhKVFhHNTRjR0Z3YWpkTE9YQnVUemRvUzBodmJVVlZabnBNTW1FeFFtbEpRMDF2WXpCUVpFTlBZVkJpYjFGTFFtZFJSREJ3UkZBdmN5czRaWEpFYW1SdmVrdzNYRzVVUjFkNmFYWkpSR3h1TVZFNWEzaFRjVGxSWmpKMk0waFRjVXRPVlRreFR6bGtNalp0VVhSblVIZGpabWx1YVVJelMzTlRWekJDV1Zrdk9UTnhSR0pSWEc1T1pUQkJMMVpRWjNWRVduVlRWR1ZRWVVjMVVVNTBTVk40ZDBReVRVdExMelZ5TTFWYVZXVXhWa0ZIVkUwMk1YaFljM2RHV0dOalVIVm1UamRyYjFWUFhHNW9RbTF5VmxCSFNVTXpNVWx5TUZGemN6TXJjMHg1ZEZGR1VVdENaMUZFWjJSSWVITkdNSGhVWTBkSVkwZ3piazQyT1daVVVFUk9kVVJuV1RGU1EwbHRYRzVuV1ZneVZTdG9WekIwUTNCbVpUUk5ORGRVZDJWMmJEQkVRWFp4ZDJaaVkyZEVUV1pqY1ZCU1pqZEZkVFpOV0ZwQ1QxazRkMmhUYXpkdVZsaFlURGR2WEc1TVRYbEpTa0ZYU0RoNk1YZGFNMWxsU1ZRclIyZFdVMGRzYmpSclNtWm9aR3BsUkd0SFdFaFlXV1JKWTJWU1ltOHJaR3hLTVZRMlRuTnFUbUZhY0c1eVhHNW9Sa1pvZEc5MGJ5OVJTMEpuVVVSeVVuQkJUSFJ6ZVdSUWVIaG9ZVE5oTkZnM2VtWmplREZXWm1kR0wxQTJRV1pWWTJ4eU5saDRkbXRqVUV4RU5FTnFYRzVWTm0xMWNqQnNWbWR6WjJrclZsUjZOek5zUnpacFRub3pjR1oxVTBGVFVFMVpNa0pwYVVORk1tbFVaVFFyVG1aT1FuZEVXVkJYWm5kWGRWaFhVMkp6WEc1VU9HbzBNek0yWWxWUVRrTXdhM2hZTXpoa2RUQmpWMFI0YkRNek1XVXpTa1JDY0hwMkwyMWFNRkpNYjA5RlltdG9jWGxsZERZMU9FVlJTMEpuVVVOWVhHNXFjRUZyTDBkYVVsRlBWVlJIVkROS2VXRkliSGhDVTBkRU0yOXdjRmRRV2pGRlRqaFlTbEJhWWtkbWQzbHNUbVUyVEVwWldIWkVjRnAxYWpGRWVIUTVYRzVOUTA1Vk4weGxiekJwZGpGdVREbGlSbTB2VVZCemVIQjNXVzlDTHpKSU5IRTJZeTlzWmsxWFNsTjNja3BtUldaNmVIUjRNbmR2VlVKeVNVNHZiMWRDWEc1NGFtUkJWR1EwVFhKTlUwODNWVk5IT0RRelFYbFFhQzh2VUN0dU0zWmxNMmsxVkZsQlkyRkphMUZMUW1kUlJIVlFaMVJpVVUxbFZXOXhVa1YxY0ZkVVhHNDJTbnA0UkZObVRUaFZUQzluY0RCbmIxaGxVRkpWVEZwa1ozSkhWMXA0Y0hwRlNTOTNRMmwyVVdSdGNpdENRVXRoVm5Wc1pIbEdjR3RIZFRWSFYwazJYRzVaTkUxSFowMVNibEV6YlUxeE9TOUROekZJYUdwNmIycGhPRFpzTTNRMVRHZE1Mek5VZGtWblNXWkdNalpDVlVneGMycHBWVmRMWlV0MVFuaDVPWGg1WEc1U2Rub3piMDkxZUhod1lVOTRhVEZWWXpKV1IwVlhTaXRUWnowOVhHNHRMUzB0TFVWT1JDQlFVa2xXUVZSRklFdEZXUzB0TFMwdFhHNGlMQW9nSUNKamJHbGxiblJmWlcxaGFXd2lPaUFpWVd4amFXUmxMV05zZFhOMFpYSXRZM0psWVhSdmNrQmhiR05wWkdVdGNtNWtMbWxoYlM1bmMyVnlkbWxqWldGalkyOTFiblF1WTI5dElpd0tJQ0FpWTJ4cFpXNTBYMmxrSWpvZ0lqRXhORFV6TmpNek16Z3hORGs0TURReE5EWXpOQ0lzQ2lBZ0ltRjFkR2hmZFhKcElqb2dJbWgwZEhCek9pOHZZV05qYjNWdWRITXVaMjl2WjJ4bExtTnZiUzl2TDI5aGRYUm9NaTloZFhSb0lpd0tJQ0FpZEc5clpXNWZkWEpwSWpvZ0ltaDBkSEJ6T2k4dmIyRjFkR2d5TG1kdmIyZHNaV0Z3YVhNdVkyOXRMM1J2YTJWdUlpd0tJQ0FpWVhWMGFGOXdjbTkyYVdSbGNsOTROVEE1WDJObGNuUmZkWEpzSWpvZ0ltaDBkSEJ6T2k4dmQzZDNMbWR2YjJkc1pXRndhWE11WTI5dEwyOWhkWFJvTWk5Mk1TOWpaWEowY3lJc0NpQWdJbU5zYVdWdWRGOTROVEE1WDJObGNuUmZkWEpzSWpvZ0ltaDBkSEJ6T2k4dmQzZDNMbWR2YjJkc1pXRndhWE11WTI5dEwzSnZZbTkwTDNZeEwyMWxkR0ZrWVhSaEwzZzFNRGt2WVd4amFXUmxMV05zZFhOMFpYSXRZM0psWVhSdmNpVTBNR0ZzWTJsa1pTMXlibVF1YVdGdExtZHpaWEoyYVdObFlXTmpiM1Z1ZEM1amIyMGlDbjA9In19fQ=="

tls:
  # self-signed | external
  mode: "external"

  # Externally signed certificates 
  # --> no need to base64 encode
  # Files must be under certs named: ca.pem, key.pem, cert.pem
  selfSigned:
    alternativeNames: [] #["kaudit.yourdomain.io"]


k8sAuditEnvironment:  k8s # Audit Logs Source - one of: k8s, gke, aks, eks, s3

# Customise Alcide kAudit Policy
kauditPolicyFile: kaudit-policy/default-policy.yaml

# Customise Alcide kAudit Integrations
kauditIntegrationsFile: integrations/audit-integration.yaml


runOptions:
  # Pre Approve Eula
  eulaSign: true
  #  Activate Audit log analysis 
  activateAnalysis: true
  #  Enable State API 
  enableStateApi: false

ingress:
  # Enable Ingress Access to Alcide kAudit
  enable: true
  #Ingress SubDomain Hostname .... access this kAudit instance by kaudit-mycluster.secops.mycompany.com
  subDomain: redhatdemo.cloud.alcide.io
  # The ingress controller class to drive kAudit Ingress objects
  ingressControllerClass: kaudit-ingress

# storage class related to environment, or nil for environment's default
# StorageClass options:
#  GKE: "gpd" (a configured StorageClass, see above)
#  EKS: "gp2" (a configured StorageClass, see above)
#  AKS: "managed-premium" or default
#  "local-storage" (a configured StorageClass, see above, as well as related toleration/affinity configuration below)
storage:
  className:
  size: 100Gi

resources:
  javaXmX: 4G
  memoryRequest: "2Gi"
  cpuRequest: "0"
  memoryLimit: "5Gi"
  cpuLimit: "0"


# Azure
aks:
  eventHubName: ""              # Azure EventHubName name (for AKS). If using a non-default ConsumerGroup ($Default), configure it in 'consumer-group-name'.
  eventHubconnectionString: ""  # Azure EventHub connection string (for AKS)
  consumerGroupName: ""         # Azure EventHubName ConsumerGroup name (for AKS), if using a non-default ConsumerGroup (i.e. \$Default).

# GCP
gke:
  projectId: ""                 # GKE-project (for GKE)
  pubsubSubscriptionId: ""      # GKE PubSub subscription ID (only if consuming audit logs via PubSub instead of StackDriver)
  token: ""
  storageType: "pd-ssd"  # Or pd-standard

# EKS or S3
aws:
  kinesisStreamName: ""  # AWS Kinesis stream name (for EKS)
  region: ""             # AWS Kinesis stream region (for EKS and S3)
  accessKeyId: ""        # AWS Kinesis stream credentials (for EKS and S3)
  secretAccessKey: ""
  s3BucketName: ""       # AWS S3 bucket name (for S3)
  s3ResourceKeyPrefix: "" # AWS S3 logs resources keys prefix (for S3)

k8s:
  # webhook or auditsink
  mode: "webhook"
  # if k8s cluster is running via openshift set flag to "true"
  openshift: "true"

alcide:
  token:

prometheus:
  token:  

#
# Vault 
#
#  https://www.hashicorp.com/blog/injecting-vault-secrets-into-kubernetes-pods-via-a-sidecar/
# kubectl -n demo exec -ti vault-0 /bin/sh
# cat <<EOF > /home/vault/kaudit-policy.hcl
# path "secret/data/alcide/kaudit-*" {
#   capabilities = ["read"]
# }
# EOF
# vault policy write kaudit /home/vault/kaudit-policy.hcl
# vault auth enable kubernetes
# vault write auth/kubernetes/config \
#    token_reviewer_jwt="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
#    kubernetes_host=https://${KUBERNETES_PORT_443_TCP_ADDR}:443 \
#    kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
# vault write auth/kubernetes/role/kaudit-mycluster \
#    bound_service_account_names=alcide-k8s-kaudit-mycluster \
#    bound_service_account_namespaces=alcide-kaudit \
#    policies=kaudit \
#    ttl=1h
#  vault kv put secret/alcide/kaudit-mycluster \
#     token=''  \
#     prometheusToken=''  \
#     gkeToken='' \
#     aksConnectionString=''  \
#     awsSecretAccessKey='somesecret'

vault:
  mode: "none" # none | vault | agent-inject
  # For "vault" mode this parameter is required
  vaultServer: "http://vault.demo:8200" 
  image: "vault:1.3.2"