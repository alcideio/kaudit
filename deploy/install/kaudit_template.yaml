---

apiVersion: v1
kind: Namespace
metadata:
  name: alcide-kaudit
spec:

---

apiVersion: v1
kind: Secret
metadata:
  name: registry.alcide.io
  namespace: alcide-kaudit
  labels:
    app: kaudit
  annotations:
    com.alcide.io/component.role: alcide-registry
    com.alcide.io/info.vendor: "Alcide IO Inc."
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: "" # authentication token

---

apiVersion: v1
kind: Secret
metadata:
  name: kaudit
  namespace: alcide-kaudit
  labels:
    app: kaudit
    app-name: kaudit # kAudit instance
type: Opaque
data:
  # GKE-token (for GKE)
  gkeToken: ""
  # Azure EventHub connection string (for AKS)
  aksConnectionString: ""
  # AWS Kinesis stream credentials (for EKS and S3)
  awsSecretAccessKey: ""

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: kaudit
  namespace: alcide-kaudit
  labels:
    app: kaudit
    app-name: kaudit # kAudit instance
data:
  ca.pem: "" # pem certificate
  metadata-exclusion: "kubectl.kubernetes.io/last-applied-configuration"
  audit-source: |
    audit-env: k8s                                  # Audit Logs Source - one of: k8s, gke, aks, eks, s3
    cluster: ""                                     # Name of cluster. For GKE - the GKE cluster name, otherwise - user provided unique name. May be set in UI.
    project: ""                                     # GKE-project (for GKE)
    pubsub-subscription-id: ""                      # GKE PubSub subscription ID (only if consuming audit logs via PubSub instead of StackDriver)
    event-hub-name: ""                              # Azure EventHubName name (for AKS). If using a non-default ConsumerGroup ($Default), configure it in 'consumer-group-name'.
    stream-name: ""                                 # AWS Kinesis stream name (for EKS)
    region: ""                                      # AWS Kinesis stream region (for EKS and S3)
    access-key-id: ""                               # AWS Kinesis stream credentials (for EKS and S3)
    assumed-role: ""                                # AWS role (ARN) that can be assumed using STS, instead of access-key-id & awsSecretAccessKey (for EKS and S3)
    bucket-name: ""                                 # AWS S3 bucket name (for S3)
    resource-key-prefix: ""                         # AWS S3 logs resources keys prefix (for S3)
#   s3-custom-scheme: ""                            # AWS S3 custom scheme, use value "kaudit" when files generated by kAudit (for S3)

---

# Audit policy syntax:
# A policy is defined in Yaml syntax. A policy is composed of rules. Each rule the following syntax:
# id: unique ID of rule. Can be used to reference the rule by other rules. Format: positive integer.
# name: meaningful rule name, presented to user on event match. Should be unique.
# documentation: optional, rule documentation string.
# namespace: optional, name of rules group. 'system' is reserved.
# status: true/false (default: true), indicates if matches should be reported
# combine-op: and/or (default: and), the logical operator to combine conditions values
# conditions: one or more logical conditions to match audit entries
#   a reference condition: has the logical value of another rule, whose id is the same as the ref-id. For example: {ref-id: 1}
#   a logical condition: matches an audit entry's field to the match-value using a match operator
#   field: audit entry field name:
#      principal
#      user-id
#      username
#      user-groups
#
#      impersonated-principal
#      impersonated-user-id
#      impersonated-username
#      impersonated-groups
#
#      access-type
#
#      caller-ip
#      caller-ip-asn
#      caller-ip-country
#
#      api-group
#      api-version
#      resource-type
#      resource-namespace
#      resource-name
#      subresource
#      subresource-exec-command
#      subresource-exec-container
#      subresource-exec-tty
#      subresource-exec-stdin
#      subresource-exec-stdout
#      subresource-logs-container
#      unusual-uri
#      verb
#
#      role
#      cluster-role
#
#      non-authorized
#      status
#      status-code
#      status-reason
#
#      original-user-agent
#      caller-supplied-user-agent
#
#      ua-command
#      ua-gcloud
#      ua-python
#      ua-term
#      ua-mozilla
#      ua-applewebkit
#      ua-chrome
#      ua-safari
#   match-op: =/!=/~/!~ (equals, non-equals, regex-match, non-regex-match
#   match-value: value used in match operation. Empty value with = match-op can be used to match event who doesn't have the field.
#
# Example:
#- id: 1
#  name: pod execution in production namespaces
#  description: execution of pods in namespaces whose name contains 'production'
#  conditions:
#   - {ref-id: 2}
#   - {field: resource-namespace, match-op: ~, match-value: production}
#- id: 2
#  name: pod execution rule
#  status: false
#  combine-op: and
#  conditions:
#   - {field: verb, match-op: =, match-value: create}
#   - {field: resource-type, match-op: =, match-value: pods}
#   - {field: subresource, match-op: =, match-value: exec}

apiVersion: v1
kind: ConfigMap
metadata:
  name: kaudit-policy
  namespace: alcide-kaudit
  labels:
    app: kaudit
    app-name: kaudit # kAudit instance
data:
  audit-policy: |
    - id: 1
      name: any pod creation
      conditions:
       - {field: verb, match-op: =, match-value: create}
       - {field: resource-type, match-op: =, match-value: pods}
       - {field: subresource, match-op: =, match-value: ''}
    - id: 2
      name: any pod execution
      conditions:
       - {field: resource-type, match-op: =, match-value: pods}
       - {field: subresource, match-op: =, match-value: exec}

---

# kAudit integrations configurations.
# There are 3 types of integrations: detections, selections (policy matches), and activity (raw audit entries)
# The configuration of each integration type has 3 sections:
# - type (required): the integration type
# - target (required): one or more destinations (endpoints) for sending matched data.
#   Supported targets include: Slack, HTTP-API, Syslog, Kafka topic, Azure Sentinel & Azure Monitor, AWS S3
#   Each kind of target requires specific configuration, e.g. credentials or target address.
#   Data is not sent to stopped targets.
# - data-filter (optional): a filter determining which processed results to send to the target(s).
#   The filter's specifics depend on the integration type (i.e. the processed data to filter).
# - name (optional): a short name for the integration. Up to 15 alphanumeric, '_', '-' and ' ' characters.
#
# Below is an extended sample configuration.
#
# Values in a target configuration which are sensitive, like credentials or tokens, may be configured
# by referencing an environment variable, a k8s secret or an entry in externally mounted secrets (e.g from Vault),
# using the following syntax:
# Sensitive value configuration with value 'foo' (note the mandatory prefix 'val-' in the field name), set up for example through Vault:
# val-my-key: foo
# A configuration of field 'my-credentials' that needs to be initialized to the sensitive value in 'val-my-key' (note the mandatory prefix 'ref/' in the field name):
# ref/my-credentials: val-my-key
# The relationship between these 2 fields is:
# If 'val-my-key' field is present, field 'my-credentials' will get its value, otherwise it will not have a value.
# Changes to the the value of 'val-my-key' will automatically update the referencing field (the one named 'my-credentials').
#
# Here's an example for a partial configuration of integration, with externally-injected AWS credentials:
#- type: detections
#  target:
#    - target-type: aws-s3
#    - aws-bucket: bucket
#    - aws-region: us-west
#    - aws-access-key-id: my-key-id
#    - ref/aws-secret-access-key: val-x
# And the sensitive value 'my-access-key' is injected into 'aws-secret-access-key' with a configuration like this:
#- val-x: my-access-key

apiVersion: v1
kind: ConfigMap
metadata:
  name: kaudit-integration
  namespace: alcide-kaudit
  labels:
    app: kaudit
    app-name: kaudit # kAudit instance
data:
  audit-integration: |
#    - type: detections
#      target:
#        - - slack
#          - slack-uri: 'https://hooks.slack.com/services/xYz'
#            rate-limit: 10
#        - - azure
#          - workspace-id: my-azure-analytics-workspace
#            shared-key: my-asuzre-shared-key
#            stopped: true
#        - - http-api
#          - http-api-uri: 'https://my-azure-analytics-workspace'
#            http-api-token-header: x-token
#            http-api-token: 'x123456789'
#            stopped: true
#        - - kafka
#          - kafka-broker: my-kafka-broker
#            kafka-topic: my-topic
#            stopped: true
#      data-filter:
#        etype:
#          - principal
#          - resource
#          - cluster
#        category:
#          - alcide.category/incident
#          - alcide.category/anomaly
#        confidence:
#          - high
#          - medium
#        entity-no-match: ^system:|^admin$|^cluster-autoscaler$|^10\\.(1|2)?\\d{1,2}\\.(1|2)?\\d{1,2}\\.(1|2)?\\d{1,2}$$
#    - type: selections
#      target:
#        - - http-api
#          - http-api-uri: 'https://my-api-target.com/api/xYz'
#            rate-limit: 10
#        - - syslog
#          - syslog-host: my-syslog
#            syslog-port: 5555
#            syslog-tcp: false
#      data-filter:
#         entity-no-match: ^system:|^admin$
#         rules-match: ^exec|unsafe$
#         report: details
#    - type: activity
#      target:
#        - - aws-s3
#          - aws-access-key-id: AKIA5AHBL
#            aws-secret-access-key: FUClxUubjsxGbK
#            aws-bucket: my-kaudit-activity
#            aws-region: us-west-2
#            aws-resource-key-prefix: testing
#            aws-content-type: csv
#            aws-compression: gzip
#            rate-limit: 100
#      data-filter: {}

---

# kAudit data-filter configuration, used to exclude or include specific subsets of audit-log entries from being processed
#  e.g. to exclude specific namespaces from being monitored for policy violations or abnormal activity detections.
# The default and recommended data filter is empty, meaning everything in the log is processed.
# Configuration format:
# property-id
#   include: inclusion-regular-expression
#   exclude: exclusion-regular-expression
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: kaudit-data-filter
  namespace: alcide-kaudit
  labels:
    app: kaudit
    app-name: kaudit # kAudit instance
data:
  audit-data-filter: |
#    resource-namespace:
#       include: included-namespaces-regex
#       exclude: excluded-namespaces-regex
#     resource-type:
#       include: included-resource-types-regex
#       exclude: excluded-resource-types-regex
#     resource-name:
#       include: included-resources-regex
#       exclude: excluded-resources-regex
#     principal:
#       include: included-principals-regex
#       exclude: excluded-principals-regex

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: alcide-k8s-kaudit
  namespace: alcide-kaudit

# ## (optional) For Vault integration : ##
#
# automountServiceAccountToken: true
#
# This k8s service account should be bound to a Vault role (e.g. 'kaudit-vault-role') with a policy enabling access to desired secrets
# Create the Vault policy and role with a commands like:
# vault policy write alcide-k8s-kaudit - <<EOH
#    path "secret/data/kaudit/config" {
#    capabilities = ["read"]
# }
# EOH
# vault write auth/kubernetes/role/kaudit-vault-role \
#    bound_service_account_names=alcide-k8s-kaudit \
#    bound_service_account_namespaces=alcide-kaudit \
#    policies=alcide-k8s-kaudit \
#    ttl=1h
# ## end of Vault integration ##

---

# (optional) GKE specific Storage Class
#apiVersion: storage.k8s.io/v1
#kind: StorageClass
#metadata:
#  name: gpd
#provisioner: kubernetes.io/gce-pd
#parameters:
#  type: pd-ssd  # SSD-back; or pd-standard
#  replication-type: none

---

# (optional) EKS specific Storage Class
# See https://docs.aws.amazon.com/eks/latest/userguide/ebs-csi.html for recommended EBS-backed storage in k8s 1.14+
#kind: StorageClass
#apiVersion: storage.k8s.io/v1
#metadata:
#  name: gp2
#provisioner: kubernetes.io/aws-ebs
#parameters:
#  type: gp2
#  fsType: ext4

---

# (optional) local storage
#kind: StorageClass
#apiVersion: storage.k8s.io/v1
#metadata:
#  name: local-storage
#provisioner: kubernetes.io/no-provisioner
#volumeBindingMode: WaitForFirstConsumer

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-volume-claim-kaudit
  namespace: alcide-kaudit
spec:
  # (optional) storage class related to environment, or nil for environment's default
  # StorageClass options:
  #  GKE: "gpd" (a configured StorageClass, see above)
  #  EKS: "gp2" (a configured StorageClass, see above)
  #  AKS: "managed-premium" or default
  #  "local-storage" (a configured StorageClass, see above, as well as related toleration/affinity configuration below)
  storageClassName:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi

---

apiVersion: v1
kind: Service
metadata:
  name: kaudit
  namespace: alcide-kaudit
  labels:
    app: kaudit
    app-name: kaudit # kAudit instance
spec:
  ports:
    - port: 443
      protocol: TCP
      targetPort: 8443
      name: ui
  selector:
    app-name: kaudit

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kaudit
  namespace: alcide-kaudit
  labels:
    app: kaudit
    app-name: kaudit # kAudit instance
  annotations:
    com.alcide.io/component.role: cloud-audit-k8s
    com.alcide.io/component.tier: database
    com.alcide.io/info.vendor: Alcide IO Inc.
spec:
  selector:
    matchLabels:
      app-name: kaudit
  serviceName: kaudit
  replicas: 1
  template:
    metadata:
      labels:
        app: kaudit
        app-name: kaudit
      annotations:
        # Alcide Runtime Policy
        policy.alcide.io/inbound0: service://kaudit
        policy.alcide.io/inbound1: tcp://any:8443
        policy.alcide.io/outbound0: service://kube-dns
        policy.alcide.io/outbound1: service://coredns
        policy.alcide.io/outbound2: service://kaudit

# ## (optional) Vault Webhook for Vault injection, see EXTERNAL_CONFIG_FILE below and Service Account above ##
        #vault.hashicorp.com/agent-inject: "true"
        # The Vault role with a policy enabling access to desired secrets bound to the service account
        #vault.hashicorp.com/role: "kaudit-vault-role"
        # The secret at Vault path secret/data/kaudit/config, output file is at /vault/secrets/kaudit.
        #vault.hashicorp.com/agent-inject-secret-kaudit: "secret/data/kaudit/config"
        # secrets formatting using Consul Template, the file at /vault/secrets/kaudit.

        #vault.hashicorp.com/agent-inject-template-kaudit: |
        #  {{- with secret "secret/data/kaudit/config" -}}
        #  {{ range $k, $v := .Data.data }}
        #  "{{ $k }}": "{{ $v }}"
        #  {{ end }}
        #  {{- end -}}
# ## end of Vault Webhook ##

    spec:
      terminationGracePeriodSeconds: 120

      # Alcide-specific start: using "local-storage" and dedicated node
      #tolerations:
      #  - key: "kaudit-no-schedule"
      #    operator: "Exists"
      #    effect: "NoSchedule"
      #  - key: "kaudit-no-execute"
      #    operator: "Exists"
      #    effect: "NoExecute"
      #affinity:
      #  nodeAffinity:
      #    requiredDuringSchedulingIgnoredDuringExecution:
      #      nodeSelectorTerms:
      #        - matchExpressions:
      #            - key: alcide/kaudit
      #              operator: In
      #              values:
      #                - "true"
      # Alcide-specific end

      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        fsGroup: 1000

      volumes:
      - name: key-volume
        emptyDir: {}
      - name: config-volume
        configMap:
            name: kaudit
            items:
              - key: audit-source
                path: audit-source.properties
      - name: policy-volume
        configMap:
          name: kaudit-policy
          items:
            - key: audit-policy
              path: audit-policy.yaml
      - name: integration-volume
        configMap:
          name: kaudit-integration
          items:
            - key: audit-integration
              path: audit-integration.yaml
      - name: data-filter-volume
        configMap:
          name: kaudit-data-filter
          items:
            - key: audit-data-filter
              path: audit-data-filter.yaml
      - name: data-volume
        persistentVolumeClaim:
          claimName: data-volume-claim-kaudit

      serviceAccountName: alcide-k8s-kaudit

      imagePullSecrets:
        - name: registry.alcide.io
      containers:
      - name: kaudit
        image: "gcr.io/dcvisor-162009/alcide/dcvisor/kaudit:latest"
        #imagePullPolicy: Always for :latest or no tag, IfNotPresent for other tags
        volumeMounts:
        - name: key-volume
          mountPath: /key
        - name: config-volume
          mountPath: /config
        - name: policy-volume
          mountPath: /kaudit/policy
        - name: integration-volume
          mountPath: /kaudit/integration
        - name: data-filter-volume
          mountPath: /kaudit/data-filter/
        - name: data-volume
          mountPath: /data
        ports:
          - containerPort: 8443
            protocol: TCP
            name: sec-api
        livenessProbe:
          tcpSocket:
            port: 8443
          initialDelaySeconds: 120
          periodSeconds: 10
          timeoutSeconds: 30
        readinessProbe:
          tcpSocket:
            port: 8443
          initialDelaySeconds: 120
          periodSeconds: 10
          timeoutSeconds: 30
        resources:
          requests:
            memory: "2Gi"
            cpu: "1"
          limits:
            memory: "5Gi"
            cpu: "1"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
              - NET_BIND_SERVICE
            drop:
              - all
        env:

        - name: JAVA_OPTS
          value: -Xmx4G -Djava.security.egd=file:/dev/urandom -Dclojure.spec.skip-macros=true -Dclojure.compiler.direct-linking=true

        # (optional) external configuration mounted as file, e.g. Vault secrets, to override values from ConfigMap (above) or Secret-keyRefs (below)
        # setting EXTERNAL_CONFIG_FILE to "vault" matches the configuration file and format that are set with the vault.hashicorp.com annotations above
        # Otherwise:
        #       EXTERNAL_CONFIG_FILE is file path
        #       EXTERNAL_CONFIG_FILE_PATTERN is either:
        #                              "yaml" - to parse the file's content as Yaml
        #                              "json" - to parse the file's content as Json
        #                              a Java regular expression for matching key & value in each file line
        #- name: EXTERNAL_CONFIG_FILE
        #  value: vault

        # (optional) kAudit web server's certificate and private-key:
        # default certificate may be overridden (e.g. from configmap/secret).
        # Must be valid at least for: SAN=dns:localhost,dns:kaudit.alcide-kaudit.svc,dns:kaudit.alcide-kaudit.svc.cluster.local,ip:127.0.0.1
        # For k8s env: should match ca-bundle in audit-sink
        #- name: CERT
        #  value: ""
        #- name: PRIV_KEY
        #  value: ""
        #- name: PRIV_KEY_PASSWORD
        #  value: ""
        #- name: CA
        #  value: ""
        #- name: CA_PASSWORD
        #  value: ""

        - name: TOKEN                # GKE-token (for GKE)
          valueFrom:
            secretKeyRef:
              name: kaudit
              key: gkeToken

        - name: CONNECTION_STRING    # Azure EventHubName connection (for AKS)
          valueFrom:
            secretKeyRef:
              name: kaudit
              key: aksConnectionString

        - name: SECRET_ACCESS_KEY    # AWS Kinesis stream credentials (for EKS)
          valueFrom:
            secretKeyRef:
              name: kaudit
              key: awsSecretAccessKey

        - name: STORE_LOCATION
          value: /data

