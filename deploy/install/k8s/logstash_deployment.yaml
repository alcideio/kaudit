---
kind: Service
apiVersion: v1
metadata:
  name: k8s-log-pipeline
spec:
  selector:
    app: k8s-log-pipeline
  ports:
    - protocol: TCP
      port: 9600
      targetPort: 9600
      name: logstash
    - protocol: TCP
      port: 8888
      targetPort: 8888
      name: input
---
apiVersion: v1
kind: Secret
metadata:
  name: k8s-log-pipeline-input-tls-secret
  labels:
    app: k8s-log-pipeline
type: Opaque
stringData:
  cert: |-
    incert
  priv-key: |-
    inprivkey
  priv-key-password: |-
    inprivkeypassword
  ca: |-
    inca
  ca-password: |-
    incapassword
---
apiVersion: v1
kind: Secret
metadata:
  name: k8s-log-pipeline-output-tls-secret
  labels:
    app: k8s-log-pipeline
type: Opaque
#stringData:
#  cert: |-
#    outcert
#  priv-key: |-
#    outprivkey
#  priv-key-password: |-
#    outprivkeypassword
#  ca: |-
#    outca
#  ca-password: |-
#    outcapassword
data:
  cert: ""
  priv-key: ""
  priv-key-password: ""
  ca: ""                              # the CA of the output endpoint (kAudit)  (base64 encoded)
  ca-password: ""
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: k8s-log-pipeline-config-kaudit
  labels:
    app: k8s-log-pipeline
data:
  kaudit-webhook: https://kaudit.alcide-kaudit.svc:443/auditsink # kaudit webhook to send to
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: k8s-log-pipeline-config
  labels:
    app: k8s-log-pipeline
data:
  logstash: |
    input{
        http{
            # port should match the exposed container port as well as the k8s WebHook Configuration (kubeconfig) below:
            #    server: http://<logstash-service>/audit:8888
            port=>8888

            # TLS configuration, see: https://www.elastic.co/guide/en/logstash/current/plugins-inputs-http.html#plugins-inputs-http-ssl
            # use SSL
            #ssl => true
            # ssl_key, ssl_certificate should match the k8s WebHook Configuration (kubeconfig) below:
            #    client-certificate: /path/to/cert.pem
            #    client-key: /path/to/key.pem
            # SSL certificate
            #ssl_certificate => "/etc/secrets/input/in.crt"
            # SSL key in the PKCS8 format
            #ssl_key => "/etc/secrets/input/in_priv_key"

            # SSL key passphrase
            #ssl_key_passphrase => "${TLS_IN_PRIVATE_KEY_PASSPHRASE}"
            # SSL cerificate authorities array. For validation of client certificates against these authorities.
            # Need to configure the ssl_verify_mode to peer or force_peer to enable the verification.
            #ssl_certificate_authorities => ["/etc/secrets/input/in_ca.crt"]
        }
    }
    # don't need this for kAudit, as it splits EventLists to events internally
    #filter{
    #    split{
    #        # Webhook audit backend sends several events together with EventList
    #        # split each event here.
    #        field=>[items]
    #        # We only need event subelement, remove others.
    #        remove_field=>[headers, metadata, apiVersion, "@timestamp", kind, "@version", host]
    #    }
    #    mutate{
    #        rename => {items=>event}
    #    }
    #}
    output{
      if [headers][request_path] == "/audit" {
        http {
    	    id => "alcide-kaudit"
            # kAudit WebHook
            url => "${KAUDIT_WEBHOOK}"
            http_method => "post"
            # default is json; maybe use json_batch?
            format => "json"
            # json; maybe use json_batch?
            content_type => "application/json"
            automatic_retries => 1
            retry_failed => true

            # path to X.509 CA (.pem certs) used by kAudit
            cacert => "/etc/secrets/output/out_ca.crt"

            # optional client x509 cert
            #client_cert => "/etc/secrets/output/out.crt"
            # optional client private key
            #client_key => "/etc/secrets/output/priv_key"
            # Keystore options (JKS by default, doesn't work with PEM files): keystore, keystore_password, keysture_type
            # Truststore options (JKS by default): truststore, truststore_password, truststure_type
        }
      }
    }
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: k8s-log-pipeline
spec:
  selector:
    matchLabels:
      app: k8s-log-pipeline
  template:
    metadata:
      labels:
        app: k8s-log-pipeline
    spec:
      hostname: k8s-log-pipeline
      volumes:
        - name: k8s-log-pipeline-config
          configMap:
            name: k8s-log-pipeline-config
            items:
              - key: logstash
                path: logstash.conf
        - name: k8s-log-pipeline-input-tls-volume
          secret:
            secretName: k8s-log-pipeline-input-tls-secret
            items:
              - key: cert
                path: in.crt
              - key: priv-key
                path: in_priv_key
              - key: ca
                path: in_ca.crt
        - name: k8s-log-pipeline-output-tls-volume
          secret:
            secretName: k8s-log-pipeline-output-tls-secret
            items:
              - key: cert
                path: out.crt
              - key: priv-key
                path: out_priv_key
              - key: ca
                path: out_ca.crt
      containers:
        - name: k8s-log-pipeline
          image: docker.elastic.co/logstash/logstash:7.6.1
          volumeMounts:
            - name: k8s-log-pipeline-config
              mountPath: /usr/share/logstash/pipeline
            - name: k8s-log-pipeline-input-tls-volume
              mountPath: /etc/secrets/input
            - name: k8s-log-pipeline-output-tls-volume
              mountPath: /etc/secrets/output
          ports:
            - containerPort: 9600
              name: logstash
            - containerPort: 8888
              name: input
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
                - NET_BIND_SERVICE
              drop:
                - all
          env:
            - name: KAUDIT_WEBHOOK
              valueFrom:
                configMapKeyRef:
                  name: k8s-log-pipeline-config-kaudit
                  key: kaudit-webhook
            - name: TLS_IN_PRIVATE_KEY_PASSPHRASE
              valueFrom:
                secretKeyRef:
                  name: k8s-log-pipeline-input-tls-secret
                  key: priv-key-password
            - name: TLS_IN_CA_PRIVATE_KEY_PASSPHRASE
              valueFrom:
                secretKeyRef:
                  name: k8s-log-pipeline-input-tls-secret
                  key: ca-password
            - name: TLS_OUT_PRIVATE_KEY_PASSPHRASE
              valueFrom:
                secretKeyRef:
                  name: k8s-log-pipeline-output-tls-secret
                  key: priv-key-password
            - name: TLS_OUT_CA_PRIVATE_KEY_PASSPHRASE
              valueFrom:
                secretKeyRef:
                  name: k8s-log-pipeline-output-tls-secret
                  key: ca-password
          command:
            - logstash
          #args:
          #  - jsse.enableSNIExtension=false
---